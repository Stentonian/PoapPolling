{"version":3,"sources":["poll.svg","constants/index.js","util/APIUtils.js","util/Colors.js","poll/Poll.js","util/Helpers.js","common/LoadingIndicator.js","poll/PollList.js","poll/NewPoll.js","user/login/Login.js","user/signup/Signup.js","common/NotFound.js","common/ServerError.js","user/profile/Profile.js","common/AppHeader.js","app/Offline.js","app/Dapp.js","app/App.js","registerServiceWorker.js","Provider.js","index.js"],"names":["module","exports","__webpack_require__","p","API_BASE_URL","process","REACT_APP_API_BASE_URL","ACCESS_TOKEN","POLL_QUESTION_MAX_LENGTH","POLL_CHOICE_MAX_LENGTH","NAME_MIN_LENGTH","NAME_MAX_LENGTH","USERNAME_MIN_LENGTH","USERNAME_MAX_LENGTH","EMAIL_MAX_LENGTH","PASSWORD_MIN_LENGTH","PASSWORD_MAX_LENGTH","request","options","headers","Headers","Content-Type","localStorage","getItem","append","defaults","Object","assign","fetch","url","then","response","json","ok","Promise","reject","colors","getAvatarColor","name","substr","hash","i","length","charCodeAt","index","Math","abs","RadioGroup","Radio","Group","CompletedOrVotedPollChoice","props","react_default","a","createElement","className","round","percentVote","choice","text","isSelected","icon","type","style","width","Poll","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setSelection","event","preventDefault","setState","objectSpread","state","selectedChoice","target","value","calculatePercentage","poll","totalVotes","voteCount","id","getWinningChoice","choices","reduce","prevChoice","currentChoice","Infinity","getTimeRemaining","difference_ms","Date","expirationDateTime","getTime","seconds","floor","minutes","hours","days","_this2","pollChoices","console","log","expired","winningChoice","forEach","push","key","isWinner","es_radio","react_router_dom","to","concat","createdBy","username","avatar","backgroundColor","toUpperCase","dateTimeString","date","monthIndex","getMonth","year","getFullYear","getDate","getHours","getMinutes","toString","padStart","formatDateTime","creationDateTime","question","onChange","es_button","disabled","currentVote","onClick","handleVoteSubmit","Component","LoadingIndicator","antIcon","fontSize","spin","indicator","display","textAlign","marginTop","PollList","polls","page","size","totalElements","totalPages","last","currentVotes","isLoading","loadPollList","bind","assertThisInitialized","handleLoadMore","arguments","undefined","nextProps","isAuthenticated","pollIndex","slice","history","notification","info","message","description","voteData","pollId","method","body","JSON","stringify","castVote","choiceId","catch","error","status","handleLogout","_this3","pollViews","src_poll_Poll","handleVoteChange","withRouter","Option","Select","FormItem","Form","Item","TextArea","Input","PollChoice","validateStatus","help","errorMsg","input","placeholder","choiceNumber","handleChoiceChange","removeChoice","NewPoll","LoginForm","handleSubmit","form","validateFields","err","values","loginRequest","login","setItem","accessToken","onLogin","getFieldDecorator","es_form","onSubmit","Login_FormItem","rules","required","prefix","htmlType","NotFound","ServerError","TabPane","Tabs","Header","Layout","AppHeader","handleMenuClick","_ref","onLogout","menuItems","currentUser","menu","src","pollIcon","alt","ProfileDropdownMenu","mode","selectedKeys","location","pathname","lineHeight","dropdownMenu","Divider","dropdown","overlay","trigger","getPopupContainer","document","getElementsByClassName","marginRight","Offline","children","drizzleReactHooks","useDrizzleState","web3Status","web3","pollInitialized","contracts","initialized","verifierInitialized","Verifier","GetAnswers","questionData","numAnswers","useCacheCall","useDrizzle","allAnswers","answer","useCacheSend","GetQuestions","_ref2","numQuestions","allQuestions","questionStatement","parseInt","randomRerenderKey","random","map","item","Dapp_GetAnswers","Dapp","drizzleState","account","accounts","Dapp_GetQuestions","Content","App","loadCurrentUser","handleLogin","config","placement","top","duration","redirectTo","notificationType","removeItem","success","layout","src_common_AppHeader","react_router","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","fallbackUrl","block","fallback","syncAlways","drizzleStore","generateStore","drizzle","Drizzle","ReactDOM","render","drizzle_react","DrizzleProvider","src_app_App","getElementById","URL","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3e226849.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/poll.1bc024be.svg\";","export const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080/api';\nexport const ACCESS_TOKEN = 'accessToken';\n\nexport const POLL_LIST_SIZE = 30;\nexport const MAX_CHOICES = 6;\nexport const POLL_QUESTION_MAX_LENGTH = 140;\nexport const POLL_CHOICE_MAX_LENGTH = 40;\n\nexport const NAME_MIN_LENGTH = 4;\nexport const NAME_MAX_LENGTH = 40;\n\nexport const USERNAME_MIN_LENGTH = 3;\nexport const USERNAME_MAX_LENGTH = 15;\n\nexport const EMAIL_MAX_LENGTH = 40;\n\nexport const PASSWORD_MIN_LENGTH = 6;\nexport const PASSWORD_MAX_LENGTH = 20;\n","import { API_BASE_URL, POLL_LIST_SIZE, ACCESS_TOKEN } from '../constants';\n\nconst request = (options) => {\n    const headers = new Headers({\n        'Content-Type': 'application/json',\n    })\n    \n    if(localStorage.getItem(ACCESS_TOKEN)) {\n        headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN))\n    }\n\n    const defaults = {headers: headers};\n    options = Object.assign({}, defaults, options);\n\n    return fetch(options.url, options)\n    .then(response => \n        response.json().then(json => {\n            if(!response.ok) {\n                return Promise.reject(json);\n            }\n            return json;\n        })\n    );\n};\n\nexport function getAllPolls(page, size) {\n    page = page || 0;\n    size = size || POLL_LIST_SIZE;\n\n    return request({\n        url: API_BASE_URL + \"/polls?page=\" + page + \"&size=\" + size,\n        method: 'GET'\n    });\n}\n\nexport function createPoll(pollData) {\n    return request({\n        url: API_BASE_URL + \"/polls\",\n        method: 'POST',\n        body: JSON.stringify(pollData)         \n    });\n}\n\nexport function castVote(voteData) {\n    return request({\n        url: API_BASE_URL + \"/polls/\" + voteData.pollId + \"/votes\",\n        method: 'POST',\n        body: JSON.stringify(voteData)\n    });\n}\n\nexport function login(loginRequest) {\n    return request({\n        url: API_BASE_URL + \"/auth/signin\",\n        method: 'POST',\n        body: JSON.stringify(loginRequest)\n    });\n}\n\nexport function signup(signupRequest) {\n    return request({\n        url: API_BASE_URL + \"/auth/signup\",\n        method: 'POST',\n        body: JSON.stringify(signupRequest)\n    });\n}\n\nexport function checkUsernameAvailability(username) {\n    return request({\n        url: API_BASE_URL + \"/user/checkUsernameAvailability?username=\" + username,\n        method: 'GET'\n    });\n}\n\nexport function checkEmailAvailability(email) {\n    return request({\n        url: API_BASE_URL + \"/user/checkEmailAvailability?email=\" + email,\n        method: 'GET'\n    });\n}\n\n\nexport function getCurrentUser() {\n    if(!localStorage.getItem(ACCESS_TOKEN)) {\n        return Promise.reject(\"No access token set.\");\n    }\n\n    return request({\n        url: API_BASE_URL + \"/user/me\",\n        method: 'GET'\n    });\n}\n\nexport function getUserProfile(username) {\n    return request({\n        url: API_BASE_URL + \"/users/\" + username,\n        method: 'GET'\n    });\n}\n\nexport function getUserCreatedPolls(username, page, size) {\n    page = page || 0;\n    size = size || POLL_LIST_SIZE;\n\n    return request({\n        url: API_BASE_URL + \"/users/\" + username + \"/polls?page=\" + page + \"&size=\" + size,\n        method: 'GET'\n    });\n}\n\nexport function getUserVotedPolls(username, page, size) {\n    page = page || 0;\n    size = size || POLL_LIST_SIZE;\n\n    return request({\n        url: API_BASE_URL + \"/users/\" + username + \"/votes?page=\" + page + \"&size=\" + size,\n        method: 'GET'\n    });\n}","const colors = [\n    '#F44336', '#e91e63', '#9c27b0', '#673ab7',\n    '#ff9800', '#ff5722', '#795548', '#607d8b',\n    '#3f51b5', '#2196F3', '#00bcd4', '#009688',\n    '#2196F3', '#32c787', '#00BCD4', '#ff5652',\n    '#ffc107', '#ff85af', '#FF9800', '#39bbb0',\n    '#4CAF50', '#ffeb3b', '#ffc107',\n];\n\nexport function getAvatarColor(name) {\n    name = name.substr(0, 6);\n\n    var hash = 0;\n    for (var i = 0; i < name.length; i++) {\n        hash = 31 * hash + name.charCodeAt(i);\n    }\n    var index = Math.abs(hash % colors.length);\n    return colors[index];\n}","import React, { Component } from 'react';\nimport './Poll.css';\nimport { Avatar, Icon } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { getAvatarColor } from '../util/Colors';\nimport { formatDateTime } from '../util/Helpers';\n\nimport { Radio, Button } from 'antd';\n\nconst RadioGroup = Radio.Group;\n\nclass Poll extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      selectedChoice: 0,\n    }\n  }\n\n  setSelection = (event) => {\n    event.preventDefault();\n\n    this.setState({\n      ...this.state,\n      selectedChoice: event.target.value\n    });\n  }\n\n  calculatePercentage = (choice) => {\n    if (this.props.poll.totalVotes === 0) {\n      return 0;\n    }\n    return (choice.voteCount * 100) / (this.props.poll.totalVotes);\n  };\n\n  isSelected = (choice) => {\n    return this.state.selectedChoice === choice.id;\n  }\n\n  getWinningChoice = () => {\n    return this.props.poll.choices.reduce((prevChoice, currentChoice) =>\n      currentChoice.voteCount > prevChoice.voteCount ? currentChoice : prevChoice,\n      { voteCount: -Infinity }\n    );\n  }\n\n  getTimeRemaining = (poll) => {\n    const expirationTime = new Date(poll.expirationDateTime).getTime();\n    const currentTime = new Date().getTime();\n\n    var difference_ms = expirationTime - currentTime;\n    var seconds = Math.floor((difference_ms / 1000) % 60);\n    var minutes = Math.floor((difference_ms / 1000 / 60) % 60);\n    var hours = Math.floor((difference_ms / (1000 * 60 * 60)) % 24);\n    var days = Math.floor(difference_ms / (1000 * 60 * 60 * 24));\n\n    let timeRemaining;\n\n    if (days > 0) {\n      timeRemaining = days + \" days left\";\n    } else if (hours > 0) {\n      timeRemaining = hours + \" hours left\";\n    } else if (minutes > 0) {\n      timeRemaining = minutes + \" minutes left\";\n    } else if (seconds > 0) {\n      timeRemaining = seconds + \" seconds left\";\n    } else {\n      timeRemaining = \"less than a second left\";\n    }\n\n    return timeRemaining;\n  }\n\n  render() {\n    const pollChoices = [];\n    console.log({ poll: this.props.poll })\n    if (this.props.poll.selectedChoice || this.props.poll.expired) {\n      const winningChoice = this.props.poll.expired ? this.getWinningChoice() : null;\n\n      this.props.poll.choices.forEach(choice => {\n        pollChoices.push(<CompletedOrVotedPollChoice\n          key={choice.id}\n          choice={choice}\n          isWinner={winningChoice && choice.id === winningChoice.id}\n          isSelected={this.isSelected(choice)}\n          percentVote={this.calculatePercentage(choice)}\n        />);\n      });\n    } else {\n      this.props.poll.choices.forEach(choice => {\n        pollChoices.push(<Radio className=\"poll-choice-radio\" key={choice.id} value={choice.id}>{choice.text}</Radio>)\n      })\n    }\n    return (\n      <div className=\"poll-content\">\n        <div className=\"poll-header\">\n          <div className=\"poll-creator-info\">\n            <Link className=\"creator-link\" to={`/users/${this.props.poll.createdBy.username}`}>\n              <Avatar className=\"poll-creator-avatar\"\n                style={{ backgroundColor: getAvatarColor(this.props.poll.createdBy.name) }} >\n                {this.props.poll.createdBy.name[0].toUpperCase()}\n              </Avatar>\n              <span className=\"poll-creator-name\">\n                {this.props.poll.createdBy.name}\n              </span>\n              <span className=\"poll-creator-username\">\n                @{this.props.poll.createdBy.username}\n              </span>\n              <span className=\"poll-creation-date\">\n                {formatDateTime(this.props.poll.creationDateTime)}\n              </span>\n            </Link>\n          </div>\n          <div className=\"poll-question\">\n            {this.props.poll.question}\n          </div>\n        </div>\n        <div className=\"poll-choices\">\n          <RadioGroup\n            className=\"poll-choice-radio-group\"\n            onChange={this.setSelection}\n            value={this.state.selectedChoice}>\n            {pollChoices}\n          </RadioGroup>\n        </div>\n        <div className=\"poll-footer\">\n          {\n            !(this.props.poll.selectedChoice || this.props.poll.expired) ?\n              (<Button className=\"vote-button\" disabled={!this.props.currentVote} onClick={this.props.handleVoteSubmit}>Vote</Button>) : null\n          }\n          <span className=\"total-votes\">{this.props.poll.totalVotes} votes</span>\n          <span className=\"separator\">•</span>\n          <span className=\"time-left\">\n            {\n              this.props.poll.expired ? \"Final results\" :\n                this.getTimeRemaining(this.props.poll)\n            }\n          </span>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction CompletedOrVotedPollChoice(props) {\n  return (\n    <div className=\"cv-poll-choice\">\n      <span className=\"cv-poll-choice-details\">\n        <span className=\"cv-choice-percentage\">\n          {Math.round(props.percentVote * 100) / 100}%\n                </span>\n        <span className=\"cv-choice-text\">\n          {props.choice.text}\n        </span>\n        {\n          props.isSelected ? (\n            <Icon\n              className=\"selected-choice-icon\"\n              type=\"check-circle-o\"\n            />) : null\n        }\n      </span>\n      <span className={/*props.isWinner ? 'cv-choice-percent-chart winner' : */'cv-choice-percent-chart'}\n        style={{ width: props.percentVote + '%' }}>\n      </span>\n    </div>\n  );\n}\n\nexport default Poll;\n","\nexport function formatDate(dateString) {\n  const date = new Date(dateString);\n\n  const monthNames = [\n    \"January\", \"February\", \"March\",\n    \"April\", \"May\", \"June\", \"July\",\n    \"August\", \"September\", \"October\",\n    \"November\", \"December\"\n  ];\n\n  const monthIndex = date.getMonth();\n  const year = date.getFullYear();\n\n  return monthNames[monthIndex] + ' ' + year;\n}\n\nexport function formatDateTime(dateTimeString) {\n  const date = new Date(dateTimeString);\n\n  const monthNames = [\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\",\n    \"May\", \"Jun\", \"Jul\", \"Aug\",\n    \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n  ];\n\n  const monthIndex = date.getMonth();\n  const year = date.getFullYear();\n\n  return date.getDate() + ' ' + monthNames[monthIndex] + ' ' + year + ' - ' + date.getHours() + ':' + date.getMinutes().toString().padStart(2, '0');\n}  \n","import React from 'react';\nimport { Spin, Icon } from 'antd';\n\nexport default function LoadingIndicator(props) {\n    const antIcon = <Icon type=\"loading-3-quarters\" style={{ fontSize: 30 }} spin />;\n    return (\n        <Spin indicator={antIcon} style = {{display: 'block', textAlign: 'center', marginTop: 30}} />\n    );\n}","import React, { Component } from 'react';\nimport { getAllPolls, getUserCreatedPolls, getUserVotedPolls } from '../util/APIUtils';\nimport Poll from './Poll';\nimport { castVote } from '../util/APIUtils';\nimport LoadingIndicator from '../common/LoadingIndicator';\nimport { Button, Icon, notification } from 'antd';\nimport { POLL_LIST_SIZE } from '../constants';\nimport { withRouter } from 'react-router-dom';\nimport './PollList.css';\n\nclass PollList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      polls: [],\n      page: 0,\n      size: 10,\n      totalElements: 0,\n      totalPages: 0,\n      last: true,\n      currentVotes: [],\n      isLoading: false\n    };\n    this.loadPollList = this.loadPollList.bind(this);\n    this.handleLoadMore = this.handleLoadMore.bind(this);\n  }\n\n  loadPollList(page = 0, size = POLL_LIST_SIZE) {\n    // let promise;\n    // if(this.props.username) {\n    //     if(this.props.type === 'USER_CREATED_POLLS') {\n    //         promise = getUserCreatedPolls(this.props.username, page, size);\n    //     } else if (this.props.type === 'USER_VOTED_POLLS') {\n    //         promise = getUserVotedPolls(this.props.username, page, size);                               \n    //     }\n    // } else {\n    //     promise = getAllPolls(page, size);\n    // }\n\n    // if(!promise) {\n    //     return;\n    // }\n\n    // this.setState({\n    //     isLoading: true\n    // });\n\n    // promise            \n    // .then(response => {\n    // const polls = this.state.polls.slice();\n    // const currentVotes = this.state.currentVotes.slice();\n\n    // this.setState({\n    //     polls: polls.concat(response.content),\n    //     page: 1,\n    //     size: 1,\n    //     totalElements: 1,\n    //     totalPages: 1,\n    //     last: ,\n    //     currentVotes: currentVotes.concat(Array(response.content.length).fill(null)),\n    //     isLoading: false\n    // })\n    // }).catch(error => {\n    //     this.setState({\n    //         isLoading: false\n    //     })\n    // });  \n\n  }\n\n  componentDidMount() {\n    this.loadPollList();\n  }\n\n  componentDidUpdate(nextProps) {\n    if (this.props.isAuthenticated !== nextProps.isAuthenticated) {\n      // Reset State\n      this.setState({\n        polls: [],\n        page: 0,\n        size: 10,\n        totalElements: 0,\n        totalPages: 0,\n        last: true,\n        currentVotes: [],\n        isLoading: false\n      });\n      this.loadPollList();\n    }\n  }\n\n  handleLoadMore() {\n    this.loadPollList(this.state.page + 1);\n  }\n\n  handleVoteChange(event, pollIndex) {\n    const currentVotes = this.state.currentVotes.slice();\n    currentVotes[pollIndex] = event.target.value;\n\n    this.setState({\n      currentVotes: currentVotes\n    });\n  }\n\n\n  handleVoteSubmit(event, pollIndex) {\n    event.preventDefault();\n    if (!this.props.isAuthenticated) {\n      this.props.history.push(\"/login\");\n      notification.info({\n        message: 'Polling App',\n        description: \"Please login to vote.\",\n      });\n      return;\n    }\n\n    const poll = this.state.polls[pollIndex];\n    const selectedChoice = this.state.currentVotes[pollIndex];\n\n    const voteData = {\n      pollId: poll.id,\n      choiceId: selectedChoice\n    };\n\n    castVote(voteData)\n      .then(response => {\n        const polls = this.state.polls.slice();\n        polls[pollIndex] = response;\n        this.setState({\n          polls: polls\n        });\n      }).catch(error => {\n        if (error.status === 401) {\n          this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\n        } else {\n          notification.error({\n            message: 'Polling App',\n            description: error.message || 'Sorry! Something went wrong. Please try again!'\n          });\n        }\n      });\n  }\n\n  render() {\n    const pollViews = [];\n    console.log(this.state.polls)\n    this.state.polls.forEach((poll, pollIndex) => {\n      pollViews.push(<Poll\n        key={poll.id}\n        poll={poll}\n        currentVote={this.state.currentVotes[pollIndex]}\n        handleVoteChange={(event) => this.handleVoteChange(event, pollIndex)}\n        handleVoteSubmit={(event) => this.handleVoteSubmit(event, pollIndex)} />)\n    });\n\n    return (\n      <div className=\"polls-container\">\n        <Poll\n          key={'a'}\n          poll={{ choices: [{}], createdBy: { username: 'a', name: 'b' } }}\n          currentVote={1}\n          handleVoteChange={(event) => console.log('poll change', event)}\n          handleVoteSubmit={(event) => console.log('poll submit', event)} />\n        {/* {pollViews} */}\n        {/* {\n                    !this.state.isLoading && this.state.polls.length === 0 ? (\n                        <div className=\"no-polls-found\">\n                            <span>No Polls Found.</span>\n                        </div>    \n                    ): null\n                }  \n                {\n                    !this.state.isLoading && !this.state.last ? (\n                        <div className=\"load-more-polls\"> \n                            <Button type=\"dashed\" onClick={this.handleLoadMore} disabled={this.state.isLoading}>\n                                <Icon type=\"plus\" /> Load more\n                            </Button>\n                        </div>): null\n                }              \n                {\n                    this.state.isLoading ? \n                    <LoadingIndicator />: null                     \n                } */}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(PollList);\n","import React, { Component } from 'react';\nimport { createPoll } from '../util/APIUtils';\nimport { MAX_CHOICES, POLL_QUESTION_MAX_LENGTH, POLL_CHOICE_MAX_LENGTH } from '../constants';\nimport './NewPoll.css';  \nimport { Form, Input, Button, Icon, Select, Col, notification } from 'antd';\nconst Option = Select.Option;\nconst FormItem = Form.Item;\nconst { TextArea } = Input\n\nclass NewPoll extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            question: {\n                text: ''\n            },\n            choices: [{\n                text: ''\n            }, {\n                text: ''\n            }],\n            pollLength: {\n                days: 1,\n                hours: 0\n            }\n        };\n        this.addChoice = this.addChoice.bind(this);\n        this.removeChoice = this.removeChoice.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleQuestionChange = this.handleQuestionChange.bind(this);\n        this.handleChoiceChange = this.handleChoiceChange.bind(this);\n        this.handlePollDaysChange = this.handlePollDaysChange.bind(this);\n        this.handlePollHoursChange = this.handlePollHoursChange.bind(this);\n        this.isFormInvalid = this.isFormInvalid.bind(this);\n    }\n\n    addChoice(event) {\n        const choices = this.state.choices.slice();        \n        this.setState({\n            choices: choices.concat([{\n                text: ''\n            }])\n        });\n    }\n\n    removeChoice(choiceNumber) {\n        const choices = this.state.choices.slice();\n        this.setState({\n            choices: [...choices.slice(0, choiceNumber), ...choices.slice(choiceNumber+1)]\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        const pollData = {\n            question: this.state.question.text,\n            choices: this.state.choices.map(choice => {\n                return {text: choice.text} \n            }),\n            pollLength: this.state.pollLength\n        };\n\n        createPoll(pollData)\n        .then(response => {\n            this.props.history.push(\"/\");\n        }).catch(error => {\n            if(error.status === 401) {\n                this.props.handleLogout('/login', 'error', 'You have been logged out. Please login create poll.');    \n            } else {\n                notification.error({\n                    message: 'Polling App',\n                    description: error.message || 'Sorry! Something went wrong. Please try again!'\n                });              \n            }\n        });\n    }\n\n    validateQuestion = (questionText) => {\n        if(questionText.length === 0) {\n            return {\n                validateStatus: 'error',\n                errorMsg: 'Please enter your question!'\n            }\n        } else if (questionText.length > POLL_QUESTION_MAX_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Question is too long (Maximum ${POLL_QUESTION_MAX_LENGTH} characters allowed)`\n            }    \n        } else {\n            return {\n                validateStatus: 'success',\n                errorMsg: null\n            }\n        }\n    }\n\n    handleQuestionChange(event) {\n        const value = event.target.value;\n        this.setState({\n            question: {\n                text: value,\n                ...this.validateQuestion(value)\n            }\n        });\n    }\n\n    validateChoice = (choiceText) => {\n        if(choiceText.length === 0) {\n            return {\n                validateStatus: 'error',\n                errorMsg: 'Please enter a choice!'\n            }\n        } else if (choiceText.length > POLL_CHOICE_MAX_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Choice is too long (Maximum ${POLL_CHOICE_MAX_LENGTH} characters allowed)`\n            }    \n        } else {\n            return {\n                validateStatus: 'success',\n                errorMsg: null\n            }\n        }\n    }\n\n    handleChoiceChange(event, index) {\n        const choices = this.state.choices.slice();\n        const value = event.target.value;\n\n        choices[index] = {\n            text: value,\n            ...this.validateChoice(value)\n        }\n\n        this.setState({\n            choices: choices\n        });\n    }\n\n\n    handlePollDaysChange(value) {\n        const pollLength = Object.assign(this.state.pollLength, {days: value});\n        this.setState({\n            pollLength: pollLength\n        });\n    }\n\n    handlePollHoursChange(value) {\n        const pollLength = Object.assign(this.state.pollLength, {hours: value});\n        this.setState({\n            pollLength: pollLength\n        });\n    }\n\n    isFormInvalid() {\n        if(this.state.question.validateStatus !== 'success') {\n            return true;\n        }\n    \n        for(let i = 0; i < this.state.choices.length; i++) {\n            const choice = this.state.choices[i];            \n            if(choice.validateStatus !== 'success') {\n                return true;\n            }\n        }\n    }\n\n    render() {\n        const choiceViews = [];\n        this.state.choices.forEach((choice, index) => {\n            choiceViews.push(<PollChoice key={index} choice={choice} choiceNumber={index} removeChoice={this.removeChoice} handleChoiceChange={this.handleChoiceChange}/>);\n        });\n\n        return (\n            <div className=\"new-poll-container\">\n                <h1 className=\"page-title\">Create Poll</h1>\n                <div className=\"new-poll-content\">\n                    <Form onSubmit={this.handleSubmit} className=\"create-poll-form\">\n                        <FormItem validateStatus={this.state.question.validateStatus}\n                            help={this.state.question.errorMsg} className=\"poll-form-row\">\n                        <TextArea \n                            placeholder=\"Enter your question\"\n                            style = {{ fontSize: '16px' }} \n                            autosize={{ minRows: 3, maxRows: 6 }} \n                            name = \"question\"\n                            value = {this.state.question.text}\n                            onChange = {this.handleQuestionChange} />\n                        </FormItem>\n                        {choiceViews}\n                        <FormItem className=\"poll-form-row\">\n                            <Button type=\"dashed\" onClick={this.addChoice} disabled={this.state.choices.length === MAX_CHOICES}>\n                                <Icon type=\"plus\" /> Add a choice\n                            </Button>\n                        </FormItem>\n                        <FormItem className=\"poll-form-row\">\n                            <Col xs={24} sm={4}>\n                                Poll length: \n                            </Col>\n                            <Col xs={24} sm={20}>    \n                                <span style = {{ marginRight: '18px' }}>\n                                    <Select \n                                        name=\"days\"\n                                        defaultValue=\"1\" \n                                        onChange={this.handlePollDaysChange}\n                                        value={this.state.pollLength.days}\n                                        style={{ width: 60 }} >\n                                        {\n                                            Array.from(Array(8).keys()).map(i => \n                                                <Option key={i}>{i}</Option>                                        \n                                            )\n                                        }\n                                    </Select> &nbsp;Days\n                                </span>\n                                <span>\n                                    <Select \n                                        name=\"hours\"\n                                        defaultValue=\"0\" \n                                        onChange={this.handlePollHoursChange}\n                                        value={this.state.pollLength.hours}\n                                        style={{ width: 60 }} >\n                                        {\n                                            Array.from(Array(24).keys()).map(i => \n                                                <Option key={i}>{i}</Option>                                        \n                                            )\n                                        }\n                                    </Select> &nbsp;Hours\n                                </span>\n                            </Col>\n                        </FormItem>\n                        <FormItem className=\"poll-form-row\">\n                            <Button type=\"primary\" \n                                htmlType=\"submit\" \n                                size=\"large\" \n                                disabled={this.isFormInvalid()}\n                                className=\"create-poll-form-button\">Create Poll</Button>\n                        </FormItem>\n                    </Form>\n                </div>    \n            </div>\n        );\n    }\n}\n\nfunction PollChoice(props) {\n    return (\n        <FormItem validateStatus={props.choice.validateStatus}\n        help={props.choice.errorMsg} className=\"poll-form-row\">\n            <Input \n                placeholder = {'Choice ' + (props.choiceNumber + 1)}\n                size=\"large\"\n                value={props.choice.text} \n                className={ props.choiceNumber > 1 ? \"optional-choice\": null}\n                onChange={(event) => props.handleChoiceChange(event, props.choiceNumber)} />\n\n            {\n                props.choiceNumber > 1 ? (\n                <Icon\n                    className=\"dynamic-delete-button\"\n                    type=\"close\"\n                    disabled={props.choiceNumber <= 1}\n                    onClick={() => props.removeChoice(props.choiceNumber)}\n                /> ): null\n            }    \n        </FormItem>\n    );\n}\n\n\nexport default NewPoll;","import React, { Component } from 'react';\nimport { login } from '../../util/APIUtils';\nimport './Login.css';\nimport { Link } from 'react-router-dom';\nimport { ACCESS_TOKEN } from '../../constants';\n\nimport { Form, Input, Button, Icon, notification } from 'antd';\nconst FormItem = Form.Item;\n\nclass Login extends Component {\n    render() {\n        const AntWrappedLoginForm = Form.create()(LoginForm)\n        return (\n            <div className=\"login-container\">\n                <h1 className=\"page-title\">Login</h1>\n                <div className=\"login-content\">\n                    <AntWrappedLoginForm onLogin={this.props.onLogin} />\n                </div>\n            </div>\n        );\n    }\n}\n\nclass LoginForm extends Component {\n    constructor(props) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();   \n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const loginRequest = Object.assign({}, values);\n                login(loginRequest)\n                .then(response => {\n                    localStorage.setItem(ACCESS_TOKEN, response.accessToken);\n                    this.props.onLogin();\n                }).catch(error => {\n                    if(error.status === 401) {\n                        notification.error({\n                            message: 'Polling App',\n                            description: 'Your Username or Password is incorrect. Please try again!'\n                        });                    \n                    } else {\n                        notification.error({\n                            message: 'Polling App',\n                            description: error.message || 'Sorry! Something went wrong. Please try again!'\n                        });                                            \n                    }\n                });\n            }\n        });\n    }\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                <FormItem>\n                    {getFieldDecorator('usernameOrEmail', {\n                        rules: [{ required: true, message: 'Please input your username or email!' }],\n                    })(\n                    <Input \n                        prefix={<Icon type=\"user\" />}\n                        size=\"large\"\n                        name=\"usernameOrEmail\" \n                        placeholder=\"Username or Email\" />    \n                    )}\n                </FormItem>\n                <FormItem>\n                {getFieldDecorator('password', {\n                    rules: [{ required: true, message: 'Please input your Password!' }],\n                })(\n                    <Input \n                        prefix={<Icon type=\"lock\" />}\n                        size=\"large\"\n                        name=\"password\" \n                        type=\"password\" \n                        placeholder=\"Password\"  />                        \n                )}\n                </FormItem>\n                <FormItem>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\" className=\"login-form-button\">Login</Button>\n                    Or <Link to=\"/signup\">register now!</Link>\n                </FormItem>\n            </Form>\n        );\n    }\n}\n\n\nexport default Login;","import React, { Component } from 'react';\nimport { signup, checkUsernameAvailability, checkEmailAvailability } from '../../util/APIUtils';\nimport './Signup.css';\nimport { Link } from 'react-router-dom';\nimport { \n    NAME_MIN_LENGTH, NAME_MAX_LENGTH, \n    USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH,\n    EMAIL_MAX_LENGTH,\n    PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH\n} from '../../constants';\n\nimport { Form, Input, Button, notification } from 'antd';\nconst FormItem = Form.Item;\n\nclass Signup extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: {\n                value: ''\n            },\n            username: {\n                value: ''\n            },\n            email: {\n                value: ''\n            },\n            password: {\n                value: ''\n            }\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.validateUsernameAvailability = this.validateUsernameAvailability.bind(this);\n        this.validateEmailAvailability = this.validateEmailAvailability.bind(this);\n        this.isFormInvalid = this.isFormInvalid.bind(this);\n    }\n\n    handleInputChange(event, validationFun) {\n        const target = event.target;\n        const inputName = target.name;        \n        const inputValue = target.value;\n\n        this.setState({\n            [inputName] : {\n                value: inputValue,\n                ...validationFun(inputValue)\n            }\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n    \n        const signupRequest = {\n            name: this.state.name.value,\n            email: this.state.email.value,\n            username: this.state.username.value,\n            password: this.state.password.value\n        };\n        signup(signupRequest)\n        .then(response => {\n            notification.success({\n                message: 'Polling App',\n                description: \"Thank you! You're successfully registered. Please Login to continue!\",\n            });          \n            this.props.history.push(\"/login\");\n        }).catch(error => {\n            notification.error({\n                message: 'Polling App',\n                description: error.message || 'Sorry! Something went wrong. Please try again!'\n            });\n        });\n    }\n\n    isFormInvalid() {\n        return !(this.state.name.validateStatus === 'success' &&\n            this.state.username.validateStatus === 'success' &&\n            this.state.email.validateStatus === 'success' &&\n            this.state.password.validateStatus === 'success'\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"signup-container\">\n                <h1 className=\"page-title\">Sign Up</h1>\n                <div className=\"signup-content\">\n                    <Form onSubmit={this.handleSubmit} className=\"signup-form\">\n                        <FormItem \n                            label=\"Full Name\"\n                            validateStatus={this.state.name.validateStatus}\n                            help={this.state.name.errorMsg}>\n                            <Input \n                                size=\"large\"\n                                name=\"name\"\n                                autoComplete=\"off\"\n                                placeholder=\"Your full name\"\n                                value={this.state.name.value} \n                                onChange={(event) => this.handleInputChange(event, this.validateName)} />    \n                        </FormItem>\n                        <FormItem label=\"Username\"\n                            hasFeedback\n                            validateStatus={this.state.username.validateStatus}\n                            help={this.state.username.errorMsg}>\n                            <Input \n                                size=\"large\"\n                                name=\"username\" \n                                autoComplete=\"off\"\n                                placeholder=\"A unique username\"\n                                value={this.state.username.value} \n                                onBlur={this.validateUsernameAvailability}\n                                onChange={(event) => this.handleInputChange(event, this.validateUsername)} />    \n                        </FormItem>\n                        <FormItem \n                            label=\"Email\"\n                            hasFeedback\n                            validateStatus={this.state.email.validateStatus}\n                            help={this.state.email.errorMsg}>\n                            <Input \n                                size=\"large\"\n                                name=\"email\" \n                                type=\"email\" \n                                autoComplete=\"off\"\n                                placeholder=\"Your email\"\n                                value={this.state.email.value} \n                                onBlur={this.validateEmailAvailability}\n                                onChange={(event) => this.handleInputChange(event, this.validateEmail)} />    \n                        </FormItem>\n                        <FormItem \n                            label=\"Password\"\n                            validateStatus={this.state.password.validateStatus}\n                            help={this.state.password.errorMsg}>\n                            <Input \n                                size=\"large\"\n                                name=\"password\" \n                                type=\"password\"\n                                autoComplete=\"off\"\n                                placeholder=\"A password between 6 to 20 characters\" \n                                value={this.state.password.value} \n                                onChange={(event) => this.handleInputChange(event, this.validatePassword)} />    \n                        </FormItem>\n                        <FormItem>\n                            <Button type=\"primary\" \n                                htmlType=\"submit\" \n                                size=\"large\" \n                                className=\"signup-form-button\"\n                                disabled={this.isFormInvalid()}>Sign up</Button>\n                            Already registed? <Link to=\"/login\">Login now!</Link>\n                        </FormItem>\n                    </Form>\n                </div>\n            </div>\n        );\n    }\n\n    // Validation Functions\n\n    validateName = (name) => {\n        if(name.length < NAME_MIN_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Name is too short (Minimum ${NAME_MIN_LENGTH} characters needed.)`\n            }\n        } else if (name.length > NAME_MAX_LENGTH) {\n            return {\n                validationStatus: 'error',\n                errorMsg: `Name is too long (Maximum ${NAME_MAX_LENGTH} characters allowed.)`\n            }\n        } else {\n            return {\n                validateStatus: 'success',\n                errorMsg: null,\n              };            \n        }\n    }\n\n    validateEmail = (email) => {\n        if(!email) {\n            return {\n                validateStatus: 'error',\n                errorMsg: 'Email may not be empty'                \n            }\n        }\n\n        const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\n        if(!EMAIL_REGEX.test(email)) {\n            return {\n                validateStatus: 'error',\n                errorMsg: 'Email not valid'\n            }\n        }\n\n        if(email.length > EMAIL_MAX_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Email is too long (Maximum ${EMAIL_MAX_LENGTH} characters allowed)`\n            }\n        }\n\n        return {\n            validateStatus: null,\n            errorMsg: null\n        }\n    }\n\n    validateUsername = (username) => {\n        if(username.length < USERNAME_MIN_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Username is too short (Minimum ${USERNAME_MIN_LENGTH} characters needed.)`\n            }\n        } else if (username.length > USERNAME_MAX_LENGTH) {\n            return {\n                validationStatus: 'error',\n                errorMsg: `Username is too long (Maximum ${USERNAME_MAX_LENGTH} characters allowed.)`\n            }\n        } else {\n            return {\n                validateStatus: null,\n                errorMsg: null\n            }\n        }\n    }\n\n    validateUsernameAvailability() {\n        // First check for client side errors in username\n        const usernameValue = this.state.username.value;\n        const usernameValidation = this.validateUsername(usernameValue);\n\n        if(usernameValidation.validateStatus === 'error') {\n            this.setState({\n                username: {\n                    value: usernameValue,\n                    ...usernameValidation\n                }\n            });\n            return;\n        }\n\n        this.setState({\n            username: {\n                value: usernameValue,\n                validateStatus: 'validating',\n                errorMsg: null\n            }\n        });\n\n        checkUsernameAvailability(usernameValue)\n        .then(response => {\n            if(response.available) {\n                this.setState({\n                    username: {\n                        value: usernameValue,\n                        validateStatus: 'success',\n                        errorMsg: null\n                    }\n                });\n            } else {\n                this.setState({\n                    username: {\n                        value: usernameValue,\n                        validateStatus: 'error',\n                        errorMsg: 'This username is already taken'\n                    }\n                });\n            }\n        }).catch(error => {\n            // Marking validateStatus as success, Form will be recchecked at server\n            this.setState({\n                username: {\n                    value: usernameValue,\n                    validateStatus: 'success',\n                    errorMsg: null\n                }\n            });\n        });\n    }\n\n    validateEmailAvailability() {\n        // First check for client side errors in email\n        const emailValue = this.state.email.value;\n        const emailValidation = this.validateEmail(emailValue);\n\n        if(emailValidation.validateStatus === 'error') {\n            this.setState({\n                email: {\n                    value: emailValue,\n                    ...emailValidation\n                }\n            });    \n            return;\n        }\n\n        this.setState({\n            email: {\n                value: emailValue,\n                validateStatus: 'validating',\n                errorMsg: null\n            }\n        });\n\n        checkEmailAvailability(emailValue)\n        .then(response => {\n            if(response.available) {\n                this.setState({\n                    email: {\n                        value: emailValue,\n                        validateStatus: 'success',\n                        errorMsg: null\n                    }\n                });\n            } else {\n                this.setState({\n                    email: {\n                        value: emailValue,\n                        validateStatus: 'error',\n                        errorMsg: 'This Email is already registered'\n                    }\n                });\n            }\n        }).catch(error => {\n            // Marking validateStatus as success, Form will be recchecked at server\n            this.setState({\n                email: {\n                    value: emailValue,\n                    validateStatus: 'success',\n                    errorMsg: null\n                }\n            });\n        });\n    }\n\n    validatePassword = (password) => {\n        if(password.length < PASSWORD_MIN_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Password is too short (Minimum ${PASSWORD_MIN_LENGTH} characters needed.)`\n            }\n        } else if (password.length > PASSWORD_MAX_LENGTH) {\n            return {\n                validationStatus: 'error',\n                errorMsg: `Password is too long (Maximum ${PASSWORD_MAX_LENGTH} characters allowed.)`\n            }\n        } else {\n            return {\n                validateStatus: 'success',\n                errorMsg: null,\n            };            \n        }\n    }\n\n}\n\nexport default Signup;","import React, { Component } from 'react';\nimport './NotFound.css';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'antd';\n\nclass NotFound extends Component {\n    render() {\n        return (\n            <div className=\"page-not-found\">\n                <h1 className=\"title\">\n                    404\n                </h1>\n                <div className=\"desc\">\n                    The Page you're looking for was not found.\n                </div>\n                <Link to=\"/\"><Button className=\"go-back-btn\" type=\"primary\" size=\"large\">Go Back</Button></Link>\n            </div>\n        );\n    }\n}\n\nexport default NotFound;","import React, { Component } from 'react';\nimport './ServerError.css';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'antd';\n\nclass ServerError extends Component {\n    render() {\n        return (\n            <div className=\"server-error-page\">\n                <h1 className=\"server-error-title\">\n                    500\n                </h1>\n                <div className=\"server-error-desc\">\n                    Oops! Something went wrong at our Server. Why don't you go back?\n                </div>\n                <Link to=\"/\"><Button className=\"server-error-go-back-btn\" type=\"primary\" size=\"large\">Go Back</Button></Link>\n            </div>\n        );\n    }\n}\n\nexport default ServerError;","import React, { Component } from 'react';\nimport PollList from '../../poll/PollList';\nimport { getUserProfile } from '../../util/APIUtils';\nimport { Avatar, Tabs } from 'antd';\nimport { getAvatarColor } from '../../util/Colors';\nimport { formatDate } from '../../util/Helpers';\nimport LoadingIndicator  from '../../common/LoadingIndicator';\nimport './Profile.css';\nimport NotFound from '../../common/NotFound';\nimport ServerError from '../../common/ServerError';\n\nconst TabPane = Tabs.TabPane;\n\nclass Profile extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: null,\n            isLoading: false\n        }\n        this.loadUserProfile = this.loadUserProfile.bind(this);\n    }\n\n    loadUserProfile(username) {\n        this.setState({\n            isLoading: true\n        });\n\n        getUserProfile(username)\n        .then(response => {\n            this.setState({\n                user: response,\n                isLoading: false\n            });\n        }).catch(error => {\n            if(error.status === 404) {\n                this.setState({\n                    notFound: true,\n                    isLoading: false\n                });\n            } else {\n                this.setState({\n                    serverError: true,\n                    isLoading: false\n                });        \n            }\n        });        \n    }\n      \n    componentDidMount() {\n        const username = this.props.match.params.username;\n        this.loadUserProfile(username);\n    }\n\n    componentDidUpdate(nextProps) {\n        if(this.props.match.params.username !== nextProps.match.params.username) {\n            this.loadUserProfile(nextProps.match.params.username);\n        }        \n    }\n\n    render() {\n        if(this.state.isLoading) {\n            return <LoadingIndicator />;\n        }\n\n        if(this.state.notFound) {\n            return <NotFound />;\n        }\n\n        if(this.state.serverError) {\n            return <ServerError />;\n        }\n\n        const tabBarStyle = {\n            textAlign: 'center'\n        };\n\n        return (\n            <div className=\"profile\">\n                { \n                    this.state.user ? (\n                        <div className=\"user-profile\">\n                            <div className=\"user-details\">\n                                <div className=\"user-avatar\">\n                                    <Avatar className=\"user-avatar-circle\" style={{ backgroundColor: getAvatarColor(this.state.user.name)}}>\n                                        {this.state.user.name[0].toUpperCase()}\n                                    </Avatar>\n                                </div>\n                                <div className=\"user-summary\">\n                                    <div className=\"full-name\">{this.state.user.name}</div>\n                                    <div className=\"username\">@{this.state.user.username}</div>\n                                    <div className=\"user-joined\">\n                                        Joined {formatDate(this.state.user.joinedAt)}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"user-poll-details\">    \n                                <Tabs defaultActiveKey=\"1\" \n                                    animated={false}\n                                    tabBarStyle={tabBarStyle}\n                                    size=\"large\"\n                                    className=\"profile-tabs\">\n                                    <TabPane tab={`${this.state.user.pollCount} Polls`} key=\"1\">\n                                        <PollList username={this.props.match.params.username} type=\"USER_CREATED_POLLS\" />\n                                    </TabPane>\n                                    <TabPane tab={`${this.state.user.voteCount} Votes`}  key=\"2\">\n                                        <PollList username={this.props.match.params.username} type=\"USER_VOTED_POLLS\" />\n                                    </TabPane>\n                                </Tabs>\n                            </div>  \n                        </div>  \n                    ): null               \n                }\n            </div>\n        );\n    }\n}\n\nexport default Profile;","import React, { Component } from 'react';\nimport {\n    Link,\n    withRouter\n} from 'react-router-dom';\nimport './AppHeader.css';\nimport pollIcon from '../poll.svg';\nimport { Layout, Menu, Dropdown, Icon } from 'antd';\nconst Header = Layout.Header;\n    \nclass AppHeader extends Component {\n    constructor(props) {\n        super(props);   \n        this.handleMenuClick = this.handleMenuClick.bind(this);   \n    }\n\n    handleMenuClick({ key }) {\n      if(key === \"logout\") {\n        this.props.onLogout();\n      }\n    }\n\n    render() {\n        let menuItems;\n        if(this.props.currentUser) {\n          menuItems = [\n            <Menu.Item key=\"/\">\n              <Link to=\"/\">\n                <Icon type=\"home\" className=\"nav-icon\" />\n              </Link>\n            </Menu.Item>,\n            <Menu.Item key=\"/poll/new\">\n            <Link to=\"/poll/new\">\n              <img src={pollIcon} alt=\"poll\" className=\"poll-icon\" />\n            </Link>\n          </Menu.Item>,\n          <Menu.Item key=\"/profile\" className=\"profile-menu\">\n                <ProfileDropdownMenu \n                  currentUser={this.props.currentUser} \n                  handleMenuClick={this.handleMenuClick}/>\n            </Menu.Item>\n          ]; \n        } else {\n          menuItems = [\n            <Menu.Item key=\"/login\">\n              <Link to=\"/login\">Login</Link>\n            </Menu.Item>,\n            <Menu.Item key=\"/signup\">\n              <Link to=\"/signup\">Signup</Link>\n            </Menu.Item>                  \n          ];\n        }\n\n        return (\n            <Header className=\"app-header\">\n            <div className=\"container\">\n              <div className=\"app-title\" >\n                <Link to=\"/\">Polling App</Link>\n              </div>\n              <Menu\n                className=\"app-menu\"\n                mode=\"horizontal\"\n                selectedKeys={[this.props.location.pathname]}\n                style={{ lineHeight: '64px' }} >\n                  {menuItems}\n              </Menu>\n            </div>\n          </Header>\n        );\n    }\n}\n\nfunction ProfileDropdownMenu(props) {\n  const dropdownMenu = (\n    <Menu onClick={props.handleMenuClick} className=\"profile-dropdown-menu\">\n      <Menu.Item key=\"user-info\" className=\"dropdown-item\" disabled>\n        <div className=\"user-full-name-info\">\n          {props.currentUser.name}\n        </div>\n        <div className=\"username-info\">\n          @{props.currentUser.username}\n        </div>\n      </Menu.Item>\n      <Menu.Divider />\n      <Menu.Item key=\"profile\" className=\"dropdown-item\">\n        <Link to={`/users/${props.currentUser.username}`}>Profile</Link>\n      </Menu.Item>\n      <Menu.Item key=\"logout\" className=\"dropdown-item\">\n        Logout\n      </Menu.Item>\n    </Menu>\n  );\n\n  return (\n    <Dropdown \n      overlay={dropdownMenu} \n      trigger={['click']}\n      getPopupContainer = { () => document.getElementsByClassName('profile-menu')[0]}>\n      <a className=\"ant-dropdown-link\">\n         <Icon type=\"user\" className=\"nav-icon\" style={{marginRight: 0}} /> <Icon type=\"down\" />\n      </a>\n    </Dropdown>\n  );\n}\n\n\nexport default withRouter(AppHeader);","import React from \"react\"\nimport { drizzleReactHooks } from 'drizzle-react'\n\nexport default ({children}) => {\n  let state = drizzleReactHooks.useDrizzleState(a => a)\n  let web3Status = state.web3.status;\n  let pollInitialized =state.contracts.Poll.initialized;\n  let verifierInitialized = state.contracts.Verifier.initialized;\n\n  return (web3Status === 'initialized' && pollInitialized && verifierInitialized) ? children : <p>loading smart contracts...</p>\n}","import React from \"react\"\nimport { drizzleReactHooks } from 'drizzle-react'\nimport Poll from \"../poll/Poll\";\n\nconst GetAnswers = ({ questionData }) => {\n  const { numAnswers, index, question, expirationDateTime, creationDateTime } = questionData\n  const { useCacheCall } = drizzleReactHooks.useDrizzle()\n  let allAnswers = []\n  /*eslint-disable */\n  for (let i = 0; i < numAnswers; ++i) {\n    const answer = useCacheCall('Poll', 'getAnswer', index, i)\n    allAnswers.push({ id: i, text: answer })\n  }\n  /*eslint-enable */\n\n  const { useCacheSend } = drizzleReactHooks.useDrizzle()\n  // const { send, TXObjects } = useCacheSend('MyToken', 'transfer')\n\n  // const sendTransaction = ()\n\n  return <Poll\n    key={index}\n    poll={{ expirationDateTime, creationDateTime, question, choices: allAnswers, createdBy: { username: 'EthIndia', name: 'Team' } }}\n    currentVote={1}\n    handleVoteChange={(event) => console.log('poll change', event)}\n    handleVoteSubmit={(event) => console.log('poll submit', event)} />\n}\n\nconst GetQuestions = ({ numQuestions }) => {\n  const { useCacheCall } = drizzleReactHooks.useDrizzle()\n  let allQuestions = []\n  /*eslint-disable */\n  for (let i = 0; i < numQuestions; ++i) {\n    const questionStatement = useCacheCall('Poll', 'getQuestion', i)\n    const numAnswers = parseInt(useCacheCall('Poll', 'getNumAnswers', i))\n    const expirationDateTime = parseInt(useCacheCall('Poll', 'getQuestionEndTime', i)) * 1000\n    const creationDateTime = parseInt(useCacheCall('Poll', 'getQuestionStartTime', i)) * 1000\n    allQuestions.push({ question: questionStatement, numAnswers, index: i, expirationDateTime, creationDateTime })\n  }\n  /*eslint-enable */\n\n  const randomRerenderKey = Math.floor(Math.random() * 100000000)\n\n  return allQuestions.map((item, i) => (!!item.question) ?\n    <GetAnswers\n      key={i + randomRerenderKey}\n      questionData={item} />\n    : <p key={i}>Loading Question details...</p>\n  )\n}\n\nexport default () => {\n  // const { useCacheEvents } = drizzleReactHooks.useDrizzle()\n  const drizzleState = drizzleReactHooks.useDrizzleState(drizzleState => ({\n    account: drizzleState.accounts[0]\n  }))\n  const { useCacheCall } = drizzleReactHooks.useDrizzle()\n\n  const numQuestions = useCacheCall('Poll', 'getNumQuestions')\n\n  return <GetQuestions key={numQuestions} numQuestions={numQuestions} />\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport {\n  Route,\n  withRouter,\n  Switch\n} from 'react-router-dom';\n\nimport { getCurrentUser } from '../util/APIUtils';\nimport { ACCESS_TOKEN } from '../constants';\n\nimport PollList from '../poll/PollList';\nimport NewPoll from '../poll/NewPoll';\nimport Login from '../user/login/Login';\nimport Signup from '../user/signup/Signup';\nimport Profile from '../user/profile/Profile';\nimport AppHeader from '../common/AppHeader';\nimport NotFound from '../common/NotFound';\nimport LoadingIndicator from '../common/LoadingIndicator';\nimport PrivateRoute from '../common/PrivateRoute';\n\nimport Offline from './Offline'\nimport Dapp from './Dapp'\n\nimport { Layout, notification } from 'antd';\nconst { Content } = Layout;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: null,\n      isAuthenticated: false,\n      isLoading: false\n    }\n    this.handleLogout = this.handleLogout.bind(this);\n    this.loadCurrentUser = this.loadCurrentUser.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n\n    notification.config({\n      placement: 'topRight',\n      top: 70,\n      duration: 3,\n    });\n  }\n\n  loadCurrentUser() {\n    this.setState({\n      isLoading: true\n    });\n    getCurrentUser()\n      .then(response => {\n        this.setState({\n          currentUser: response,\n          isAuthenticated: true,\n          isLoading: false\n        });\n      }).catch(error => {\n        this.setState({\n          isLoading: false\n        });\n      });\n  }\n\n  componentDidMount() {\n    this.loadCurrentUser();\n  }\n\n  handleLogout(redirectTo = \"/\", notificationType = \"success\", description = \"You're successfully logged out.\") {\n    localStorage.removeItem(ACCESS_TOKEN);\n\n    this.setState({\n      currentUser: null,\n      isAuthenticated: false\n    });\n\n    this.props.history.push(redirectTo);\n\n    notification[notificationType]({\n      message: 'Polling App',\n      description: description,\n    });\n  }\n\n  handleLogin() {\n    notification.success({\n      message: 'Polling App',\n      description: \"You're successfully logged in.\",\n    });\n    this.loadCurrentUser();\n    this.props.history.push(\"/\");\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return <LoadingIndicator />\n    }\n    return (\n      <Layout className=\"app-container\">\n        <AppHeader isAuthenticated={this.state.isAuthenticated}\n          currentUser={this.state.currentUser}\n          onLogout={this.handleLogout} />\n\n        <Content className=\"app-content\">\n          <div className=\"container\">\n            <Offline>\n              <Dapp />\n            </Offline>\n            <Switch>\n              {/* <Route exact path=\"/\" \n                  render={(props) => <PollList isAuthenticated={this.state.isAuthenticated} \n                      currentUser={this.state.currentUser} handleLogout={this.handleLogout} {...props} />}>\n                </Route> */}\n              {/* <Route path=\"/login\" \n                  render={(props) => <Login onLogin={this.handleLogin} {...props} />}></Route>\n                <Route path=\"/signup\" component={Signup}></Route>\n                <Route path=\"/users/:username\" \n                  render={(props) => <Profile isAuthenticated={this.state.isAuthenticated} currentUser={this.state.currentUser} {...props}  />}>\n                </Route>\n                <PrivateRoute authenticated={this.state.isAuthenticated} path=\"/poll/new\" component={NewPoll} handleLogout={this.handleLogout}></PrivateRoute>\n                <Route component={NotFound}></Route> */}\n            </Switch>\n          </div>\n        </Content>\n      </Layout>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { drizzleReactHooks } from \"drizzle-react\"\nimport { Drizzle, generateStore } from \"drizzle\"\n\nimport Verifier from \"./contracts/Verifier.json\"\nimport Poll from \"./contracts/Poll.json\"\n// import web3ProvideSwitcher from \"../web3/web3ProvideSwitcher\"\nimport { theme as rimbleTheme } from 'rimble-ui'\n// import { ThemeProvider } from 'styled-components'\n\n// todo: read env var for fallback\nconst fallbackUrl = \"wss://mainnet.infura.io/ws/v3/e811479f4c414e219e7673b6671c2aba\"\n// const switchableWeb3 = web3ProvideSwitcher.createSwitchableWeb3()\n// const ProviderContext = createContext('');\n\nconst options = {\n  web3: {\n    block: false,\n    fallback: {\n      type: \"ws\",\n      url: fallbackUrl,\n    },\n    // customProvider: switchableWeb3,\n    // Repeating this because there seems to be some kind of bug somewhere where web3.web3 is used instead\n    web3: {\n      block: false,\n      fallback: {\n        type: \"ws\",\n        url: fallbackUrl,\n      },\n      // customProvider: switchableWeb3,\n    },\n  },\n  contracts: [\n    Verifier,\n    Poll\n  ],\n  syncAlways: true,\n  polls: {\n    accounts: 1500,\n  },\n}\n\nconst drizzleStore = generateStore(options)\nconst drizzle = new Drizzle(options, drizzleStore)\n\nexport default ({ children }) => {\n  // const [isWeb3Unlocked, setIsWeb3Unlocked] = useState(false);\n\n  // const unlockWeb3IfNotAlready = () => {\n  //   if (isWeb3Unlocked) return\n\n  //   web3ProvideSwitcher.unlockWeb3WithCallback(setIsWeb3Unlocked)\n  // }\n\n  return (\n    <drizzleReactHooks.DrizzleProvider drizzle={drizzle}>\n      {/* <ProviderContext.Provider value={{ isWeb3Unlocked, unlockWeb3IfNotAlready }}> */}\n        {children}\n      {/* </ProviderContext.Provider> */}\n    </drizzleReactHooks.DrizzleProvider>\n  )\n}\n\n// export const useUnlockAndCheck = () => useContext(ProviderContext);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Provider from './Provider.js'\n\nReactDOM.render(\n    <Router>\n        <Provider>\n            <App />\n        </Provider>\n    </Router>, \n    document.getElementById('root')\n);\n\nregisterServiceWorker();\n"],"sourceRoot":""}